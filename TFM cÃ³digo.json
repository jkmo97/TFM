{"cells":[{"cell_type":"code","execution_count":3,"id":"bcda9e16-93c4-471b-8e6b-8e66c3d7505e","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bcda9e16-93c4-471b-8e6b-8e66c3d7505e","executionInfo":{"status":"ok","timestamp":1693948928351,"user_tz":-120,"elapsed":31707,"user":{"displayName":"Johann Kevin Mafla Orjuela","userId":"03208760116796183252"}},"outputId":"ff79e578-1420-4f29-8d24-dd108554bdcf"},"outputs":[{"output_type":"stream","name":"stdout","text":["2023-09-05 21:21:39.148867: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n","Collecting es-core-news-lg==3.6.0\n","  Downloading https://github.com/explosion/spacy-models/releases/download/es_core_news_lg-3.6.0/es_core_news_lg-3.6.0-py3-none-any.whl (568.0 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m568.0/568.0 MB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: spacy<3.7.0,>=3.6.0 in /usr/local/lib/python3.10/dist-packages (from es-core-news-lg==3.6.0) (3.6.1)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (3.0.12)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (1.0.4)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (1.0.9)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (2.0.7)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (3.0.8)\n","Requirement already satisfied: thinc<8.2.0,>=8.1.8 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (8.1.12)\n","Requirement already satisfied: wasabi<1.2.0,>=0.9.1 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (1.1.2)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.3 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (2.4.7)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (2.0.9)\n","Requirement already satisfied: typer<0.10.0,>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (0.9.0)\n","Requirement already satisfied: pathy>=0.10.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (0.10.2)\n","Requirement already satisfied: smart-open<7.0.0,>=5.2.1 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (6.3.0)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (4.66.1)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (1.23.5)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (2.31.0)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (2.2.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (3.1.2)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (67.7.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (23.1)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (3.3.0)\n","Requirement already satisfied: annotated-types>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (0.5.0)\n","Requirement already satisfied: pydantic-core==2.6.1 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (2.6.1)\n","Requirement already satisfied: typing-extensions>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (4.7.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (3.2.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (2.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (2023.7.22)\n","Requirement already satisfied: blis<0.8.0,>=0.7.8 in /usr/local/lib/python3.10/dist-packages (from thinc<8.2.0,>=8.1.8->spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (0.7.10)\n","Requirement already satisfied: confection<1.0.0,>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from thinc<8.2.0,>=8.1.8->spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (0.1.1)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.10/dist-packages (from typer<0.10.0,>=0.3.0->spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (8.1.7)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->spacy<3.7.0,>=3.6.0->es-core-news-lg==3.6.0) (2.1.3)\n","Installing collected packages: es-core-news-lg\n","Successfully installed es-core-news-lg-3.6.0\n","\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n","You can now load the package via spacy.load('es_core_news_lg')\n"]}],"source":["# Importar los módulos necesarios\n","import spacy\n","import re\n","import os\n","!python -m spacy download es_core_news_lg\n","nlp = spacy.load('es_core_news_lg')"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nzmrCZIU6lhd","executionInfo":{"status":"ok","timestamp":1693948588032,"user_tz":-120,"elapsed":22888,"user":{"displayName":"Johann Kevin Mafla Orjuela","userId":"03208760116796183252"}},"outputId":"5f8b8fe4-5c6c-464e-d529-98f6db7d499f"},"id":"nzmrCZIU6lhd","execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["## prueba 29 de agosto de codigo\n","\n","\n","import re\n","import spacy\n","import os\n","\n","# Cargar el modelo de lenguaje de SpaCy para español\n","nlp = spacy.load(\"es_core_news_lg\")\n","\n","# Ruta del archivo de texto en Google Drive\n","ruta_archivo = \"/content/drive/MyDrive/TFM/3-BBVA_Informe_Anual_2016.txt\"\n","\n","# Leer el contenido del archivo de texto\n","with open(ruta_archivo, \"r\", encoding=\"utf-8\") as archivo:\n","    texto_completo = archivo.read()\n","\n","# Procesar el texto con SpaCy\n","doc = nlp(texto_completo)\n","\n","# Obtener tokens y sus posiciones\n","tokens = [token.text for token in doc]\n","positions = [(token.idx, token.idx + len(token.text)) for token in doc]\n","\n","# Expresiones regulares que deseo buscar\n","expresiones_regulares = [\n","    r'\\w*medioambiente\\w*',\n","    r'\\dona|done|donamos|donar|donando|donado|donada|donados|donadas',\n","    r'\\bpor\\s+acción\\b' , r'\\d+\\s*%\\s+de\\s+la\\s+recaudación',\n","    r'\\bsocial(es)?\\b', r'\\bbeca(s)?\\b', r'\\beducación\\b',\n","    r'\\bempleados\\b', r'\\bbeneficio(s)?\\b', r'\\boibda\\b',\n","    r'\\bebitda\\b', r'\\bbai\\b', r'\\bsostenibilidad\\b'\n","]\n","\n","# Buscar las expresiones regulares en el texto completo\n","resultados = {}\n","for expresion in expresiones_regulares:\n","    resultados[expresion] = []\n","    regex = re.compile(expresion, flags=re.IGNORECASE)\n","    texto_completo_lower = texto_completo.lower()\n","    for match in regex.finditer(texto_completo_lower):\n","        inicio = match.start()\n","        fin = match.end()\n","        # Buscar el índice del token que contiene la ocurrencia\n","        idx_inicio = next(idx for idx, (start, end) in enumerate(positions) if start <= inicio and end >= inicio)\n","        idx_fin = next(idx for idx, (start, end) in enumerate(positions) if start <= fin and end >= fin)\n","        contexto_inicio = max(0, idx_inicio - 80)\n","        contexto_fin = min(len(tokens), idx_fin + 81)\n","        contexto_tokens = tokens[contexto_inicio:contexto_fin]\n","        contexto = ' '.join(contexto_tokens)\n","        resultados[expresion].append((contexto, inicio, fin))\n","\n","# Guardar los resultados en archivos de texto separados\n","nombre_archivo_base = os.path.splitext(os.path.basename(ruta_archivo))[0]\n","for expresion, ocurrencias in resultados.items():\n","    nombre_archivo = re.sub(r'[^\\w\\s-]', '', f\"{nombre_archivo_base}_{expresion}.txt\")\n","    ruta_resultados = f\"/content/drive/MyDrive/TFM/archivos de bbva con regex/{nombre_archivo}\"\n","    with open(ruta_resultados, \"w\", encoding=\"utf-8\") as archivo_resultados:\n","        for idx, (ocurrencia, inicio, fin) in enumerate(ocurrencias, start=1):\n","            archivo_resultados.write(f\"Ocurrencia {idx}:\\n\")\n","            archivo_resultados.write(f\"Posición de inicio: {inicio}\\n\")\n","            archivo_resultados.write(f\"Posición de fin: {fin}\\n\")\n","            archivo_resultados.write(f\"Ocurrencia: {texto_completo[inicio:fin]}\\n\")\n","            archivo_resultados.write(f\"Contexto: {ocurrencia}\\n\")\n","            archivo_resultados.write(\"\\n\")\n"],"metadata":{"id":"nb-aVv9DTvNe"},"id":"nb-aVv9DTvNe","execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"dj47iAyvet81"},"id":"dj47iAyvet81"},{"cell_type":"code","source":["import re\n","import csv\n","import os\n","\n","# Carpeta que contiene los archivos de texto\n","carpeta_archivos = \"/content/drive/MyDrive/TFM/BBVA\"\n","\n","# Lista para almacenar todas las ocurrencias y contextos\n","todas_ocurrencias_con_contexto = []\n","\n","# Patrón para encontrar ocurrencias y contextos\n","patron_ocurrencia = re.compile(r'Ocurrencia \\d+:\\nPosición de inicio: \\d+\\nPosición de fin: \\d+\\nOcurrencia: (.+?)\\nContexto:(.+?)(?=\\n\\nOcurrencia \\d+|$)', re.DOTALL)\n","\n","\n","# Iterar a través de todos los archivos en la carpeta\n","for nombre_archivo in os.listdir(carpeta_archivos):\n","    ruta_txt = os.path.join(carpeta_archivos, nombre_archivo)\n","\n","    with open(ruta_txt, mode='r', encoding='utf-8') as file:\n","        contenido = file.read()\n","\n","    # Encontrar todas las ocurrencias y contextos en el archivo actual\n","    ocurrencias_encontradas = patron_ocurrencia.findall(contenido)\n","\n","    for ocurrencia, contexto in ocurrencias_encontradas:\n","        # Dividir el contexto en oraciones\n","        oraciones = re.split(r'(?<=[.!?])\\s+', contexto)\n","        todas_ocurrencias_con_contexto.append([ocurrencia.strip(), ' '.join(oraciones).strip()])\n","\n","# Guardar todas las ocurrencias y contextos en un archivo CSV\n","ruta_csv = \"todas_ocurrencias_telefonica.csv\"\n","with open(ruta_csv, mode='w', newline='', encoding='utf-8') as file:\n","    writer = csv.writer(file)\n","    writer.writerow([\"ocurrencia\", \"contexto\"])\n","    writer.writerows(todas_ocurrencias_con_contexto)\n","\n","print(\"Archivo CSV creado exitosamente!\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ityOAJREvE_E","executionInfo":{"status":"ok","timestamp":1693598895542,"user_tz":-120,"elapsed":3793,"user":{"displayName":"Johann Kevin Mafla Orjuela","userId":"03208760116796183252"}},"outputId":"88299493-2ec0-4bfd-9946-860942228788"},"id":"ityOAJREvE_E","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Archivo CSV creado exitosamente!\n"]}]},{"cell_type":"code","source":["import csv\n","import json\n","\n","# Cargar el archivo CSV y convertirlo en un diccionario\n","data = {}\n","with open('/content/todas_ocurrencias_bbva.csv', 'r', encoding='utf-8') as csv_file:\n","    csv_reader = csv.DictReader(csv_file)\n","    for row in csv_reader:\n","        ocurrencia = row['ocurrencia']\n","        contexto = row['contexto']\n","        modified_ocurrencia = f\"{ocurrencia}_bbva\"\n","\n","        if modified_ocurrencia in data:\n","            data[modified_ocurrencia].append(contexto)\n","        else:\n","            data[modified_ocurrencia] = [contexto]\n","\n","# Guardar el diccionario en un archivo JSON en formato UTF-8\n","with open('data_bbva.json', 'w', encoding='utf-8') as json_file:\n","    json.dump(data, json_file, indent=4, ensure_ascii=False)\n","\n","print(\"Archivo JSON creado exitosamente.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7IVZ1drKUPb4","executionInfo":{"status":"ok","timestamp":1693599735585,"user_tz":-120,"elapsed":335,"user":{"displayName":"Johann Kevin Mafla Orjuela","userId":"03208760116796183252"}},"outputId":"7b8650a2-cf4c-4564-a4d0-a742a1fe216f"},"id":"7IVZ1drKUPb4","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Archivo JSON creado exitosamente.\n"]}]},{"cell_type":"code","execution_count":4,"id":"dd6216a1","metadata":{"id":"dd6216a1","outputId":"71713794-c4f8-4d2b-9df3-3da1a5c57453","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1693949006612,"user_tz":-120,"elapsed":10382,"user":{"displayName":"Johann Kevin Mafla Orjuela","userId":"03208760116796183252"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Resultados totales guardados en el archivo: /content/drive/MyDrive/TFM/archivos de santander con regex/resultados_misc_santander.txt\n"]}],"source":["import os\n","import re\n","import spacy\n","\n","\n","nlp = spacy.load(\"es_core_news_lg\")\n","# Ruta del directorio que contiene los archivos\n","ruta_directorio = \"/content/drive/MyDrive/TFM/archivos de santander con regex\"\n","\n","# Expresión regular para encontrar contextos\n","expresion_contexto = r'Contexto:\\s*([\\s\\S]+?)(?=Ocurrencia|$)'\n","\n","# Función para buscar entidades \"MISC\" en un texto\n","def buscar_entidades_misc(texto):\n","    doc = nlp(texto)\n","    resultados = []\n","    for entidad in doc.ents:\n","        if entidad.label_ == \"MISC\":\n","            resultados.append(entidad.text)\n","    return resultados\n","\n","# Lista para almacenar los resultados\n","resultados_totales = []\n","\n","# Iterar sobre los archivos en el directorio\n","for nombre_archivo in os.listdir(ruta_directorio):\n","    if nombre_archivo.endswith(\"txt\"):\n","        ruta_archivo = os.path.join(ruta_directorio, nombre_archivo)\n","        with open(ruta_archivo, \"r\", encoding=\"utf-8\") as archivo:\n","            texto_completo = archivo.read()\n","\n","        # Encontrar contextos utilizando la expresión regular\n","        contextos_encontrados = re.findall(expresion_contexto, texto_completo)\n","\n","        # Buscar entidades MISC en cada contexto\n","        for contexto in contextos_encontrados:\n","            resultados_misc = buscar_entidades_misc(contexto)\n","            if resultados_misc:\n","                resultados_totales.append((contexto, resultados_misc))\n","\n","# Guardar todos los resultados en un archivo\n","ruta_resultados = os.path.join(ruta_directorio, \"resultados_misc_santander.txt\")\n","with open(ruta_resultados, \"w\", encoding=\"utf-8\") as archivo_resultados:\n","    for contexto, entidades_misc in resultados_totales:\n","        archivo_resultados.write(f\"Contexto:\\n{contexto}\\n\")\n","        archivo_resultados.write(\"Entidades MISC encontradas:\\n\")\n","        for entidad_misc in entidades_misc:\n","            archivo_resultados.write(f\"- {entidad_misc}\\n\")\n","        archivo_resultados.write(\"\\n\")\n","\n","print(f\"Resultados totales guardados en el archivo: {ruta_resultados}\")\n"]}],"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.7"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":5}